---
##Comman tasks 
- name: creating the common components  using ansible 
  hosts: servers
  gather_facts: no
  become: yes

  tasks: 
    - name: installing utilities for containerd in master and worker .
      command:  yum install -y yum-utils 

    - name: adding Containerd repo on Master Node and all Worker Nodes.
      command:  yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    - name: installing utilities for containerd in master and worker .
      command:  yum install -y containerd.io 
      
    - name: removing the congif.toml file 
      command:  rm -rf /etc/containerd/config.toml

    - name: enabling   containerd
      command:  systemctl enable containerd 
      
    - name: starting the conatinerd 
      command:  systemctl start containerd

    - name: printing the status of containerd 
      command:  systemctl status containerd

    - name: creating the repo file 
      command: touch /etc/yum.repos.d/kubernetes.repo

    - name: adding content in the repo file 
      blockinfile:
        path: /etc/yum.repos.d/kubernetes.repo
        block:  |
          [kubernetes]
          name=Kubernetes
          baseurl=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/
          enabled=1
          gpgcheck=1
          gpgkey=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/repodata/repomd.xml.key

    - name: installing kubernetes dependencies.
      command:  yum install -y kubelet kubectl kubeadm

    - name: setting hostname .
      blockinfile:
        path: /etc/hosts
        block:  |
          172.31.6.33 master-node
          172.31.10.226 slave-1
          172.31.15.20 slave-2

    - name: disabling the swap.
      command:  sed -i '/swap/d' /etc/fstab

    - name:  swapoff.
      command: swapoff -a

    - name:  disabling sellinux.
      command: setenforce 0

    - name:  disabling sellinux-2.
      command: sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

    - name:  creating conf file  
      command: touch /etc/sysctl.d/k8s.conf

    - name: adding content in the conf file 
      blockinfile:
        path: /etc/sysctl.d/k8s.conf
        block:  |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1

    - name:  setting up the sysctl 
      command:  sysctl --system

    - name: echoing the file 
      command: echo '1' > /proc/sys/net/ipv4/ip_forward

    - name: installing the nfs 
      command:  yum install -y nfs-utils
      
    - name: starting the nfs
      command: systemctl start nfs-server rpcbind

    - name: enabling the nfs
      command: systemctl enable nfs-server rpcbind

    - name: success message 
      debug: 
        msg: successfully created the server components 

###Master node tasks 
- name: creating the master components  using anisble 
  hosts: master
  gather_facts: no
  become: yes

  tasks: 

    - name: configuration message 
      debug:
        msg:  working......

    - name: enabling the kubelet 
      command: systemctl enable kubelet

    - name:  restarting the kubelet 
      command: systemctl restart kubelet

    - name: initializing kubeadm 
      command: kubeadm init

    - name: creating the directory
      command:  mkdir $HOME/.kube/

    - name: copying the file 
      command:  cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

    # - name: changing the file permssion 
    #   command: chown $(id -u):$(id -g) $HOME/.kube/config

    - name: applying the weave network
      command: kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
    
    - name: creating the rdatanfs folder 
      command: mkdir -p /mnt/rdatanfs

    - name: exporting rdata nfs
      command: echo "/mnt/rdatanfs *(rw,sync,no_root_squash,insecure)" > /etc/exports

    - name: exporting the file 
      command: exportfs -rav

    - name: creating the token
      command:  kubeadm token generate > /root/.kube/token

    - name: exporting the join command 
      command:  kubeadm token create $(</root/.kube/token) --print-join-command > /root/.kube/join_command

    - name: registering the join command 
      command: cat /root/.kube/join_command
      register: join_command

    - name: displaying 
      command:  kubeadm token generate > /root/.kube/token

    - name: success message 
      debug: 
        msg: successfully created the master components 

##Worker node tasks 
- name: creating the worker components using  
  gather_facts: no
  hosts: worker 
  become: yes
  tasks: 
    - name: joining the node to the cluster
      command: "{{ join_command }}"

    - name: success message 
      debug: 
        msg: node joined the cluster successfully


  

