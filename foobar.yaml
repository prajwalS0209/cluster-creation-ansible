---
##Comman tasks 
- name: creating the common components  using ansible 
  hosts: servers
  gather_facts: no
  become: yes

  tasks: 
    - name: installing utilities for containerd in master and worker .
      command:  yum install -y yum-utils 

    - name: adding Containerd repo on Master Node and all Worker Nodes.
      command:  yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    - name: installing utilities for containerd in master and worker .
      command:  yum install -y containerd.io 
      
    - name: removing the congif.toml file 
      command:  rm -rf /etc/containerd/config.toml

    - name: enabling   containerd
      command:  systemctl enable containerd 
      
    - name: starting the conatinerd 
      command:  systemctl start containerd

    - name: printing the status of containerd 
      command:  systemctl status containerd

    - name: creating the repo file 
      command: touch /etc/yum.repos.d/kubernetes.repo

    - name: adding content in the repo file 
      blockinfile:
        path: /etc/yum.repos.d/kubernetes.repo
        block:  |
          [kubernetes]
          name=Kubernetes
          baseurl=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/
          enabled=1
          gpgcheck=1
          gpgkey=https://pkgs.k8s.io/core:/stable:/v1.28/rpm/repodata/repomd.xml.key

    - name: installing kubernetes dependencies.
      command:  yum install -y kubelet kubectl kubeadm

    - name: setting hostname .
      blockinfile:
        path: /etc/hosts
        block:  |
          172.31.6.33 master-node
          172.31.10.226 slave-1
          172.31.15.20 slave-2

    - name: disabling the swap.
      command:  sed -i '/swap/d' /etc/fstab

    - name:  swapoff.
      command: swapoff -a

    - name:  disabling sellinux.
      command: setenforce 0

    - name:  disabling sellinux-2.
      command: sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

    - name:  creating conf file  
      command: touch /etc/sysctl.d/k8s.conf

    - name: adding content in the conf file 
      blockinfile:
        path: /etc/sysctl.d/k8s.conf
        block:  |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1

    - name:  setting up the sysctl 
      command:  sysctl --system

    - name: Ensure IP forwarding is enabled
      sysctl:
        name: net.ipv4.ip_forward
        value: 1
        state: present

    - name: installing the nfs 
      command:  yum install -y nfs-utils
      
    - name: starting the nfs
      command: systemctl start nfs-server rpcbind

    - name: enabling the nfs
      command: systemctl enable nfs-server rpcbind

    - name: success message 
      debug: 
        msg: successfully created the server components 

###Master node tasks 
- name: creating the master components  using anisble 
  hosts: master
  gather_facts: no
  become: yes

  tasks: 
    - name: configuration message 
      debug:
        msg:  working......

    - name: enabling the kubelet 
      command: systemctl enable kubelet

    - name:  restarting the kubelet 
      command: systemctl restart kubelet

    - name: enabling the kernel module
      command: modprobe br_netfilter

    - name: enabling the kernel module 
      command:  modprobe overlay

    - name: initializing kubeadm 
      command: kubeadm init

    - name: creating the directory
      command:  mkdir $HOME/.kube/

    - name: copying the file 
      command:  cp -i /etc/kubernetes/admin.conf $HOME/.kube/config

    # - name: changing the file permssion 
    #   command: chown $(id -u):$(id -g) $HOME/.kube/config

    - name: applying the weave network
      command: kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
    
    - name: creating the rdatanfs folder 
      command: mkdir -p /mnt/rdatanfs

    - name: exporting rdata nfs
      command: echo "/mnt/rdatanfs *(rw,sync,no_root_squash,insecure)" > /etc/exports

    - name: exporting the file 
      command: exportfs -rav

    - name: Creating the token
      command: kubeadm token generate
      register: token_output

    - name: Exporting the join command
      shell: kubeadm token create --print-join-command > /root/.kube/join_command
      args:
        executable: /bin/bash

    - name: Registering the join command
      command: cat /root/.kube/join_command
      register: join_command

    - name: Setting a fact with the join_command
      set_fact:
        master_generated_value: "{{ join_command.stdout }}"

    - name: Success message for master components creation
      debug:
        msg: "Successfully created the master components"


# Worker node tasks
- name: creating worker node components
  hosts: worker 
  become: yes
  gather_facts: no

  tasks: 
  - name: Using the value generated on master node
    command: " {{ hostvars['master]['master_generated_value'] }}"

  - name: Success message for worker node joining
    debug:
      msg: "Node joined the cluster successfully"
